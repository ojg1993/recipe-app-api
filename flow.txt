1. Created Gihub repo

2. Added requirements.txt, requirements.dev.txt
3. Added app directory

4. Scripted Dockerfile -> Docker-Compose.yml -> .dockerignore
5. Added linting configuration in app directory(.flake8)

6. Execute the docker-compose commands
  - docker-compose run --rm app sh -c "django-admin startproject app ."
  - docker-compose up

7. Access to the server

8. Configured github actions .github/workflows/checks.yml
9. Configured dockerhub credentials in github repo secrets

10. Database configuration
  - Added psycopg2 to requirements.txt
  - Configured postgresql dependencies in project Dockerfile
    [postgresql-client, build-base, postgresql-dev, musl-dev]
  - Deleted installation dependencies[build-base, postgresql-dev, musl-dev]
  - Setup Django to use postgresql

11. Database configuration 2 -> start django after finishing db configuration
  - Added core application
  - Handled race condition(Wait for the db to be ready)
    - Added core/test/test_commands.py
    - Added core/management/commands/wait_for_db.py
  - Added migrate, wait_for_db commands in docker-compose.yml
  - Added wait_for_db test command in Github Actions

12. Customise User model
  - Add User customisation with AbstractUser, PermissionsMixin
  - Add UserManager customisation with BaseUserManager
  - Configure AUTH_USER_MODEL as 'core.User' in settings.py
  - Execute makemigrations
    - docker-compose run --rm app sh -c "python manage.py makemigrations"
  - Delete existing db data
    - docker volume rm recipe-app-api_dev-db-data
  - Execute migrate
    - docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py migrate"


â€» TDD application
  a. scripts test code first with the expected actions of the view
  b. scripts view code fitting the test code