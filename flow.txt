1. Created Gihub repo

2. Added requirements.txt, requirements.dev.txt
3. Added app directory

4. Scripted Dockerfile -> Docker-Compose.yml -> .dockerignore
5. Added linting configuration in app directory(.flake8)

6. Execute the docker-compose commands
  - docker-compose run --rm app sh -c "django-admin startproject app ."
  - docker-compose up

7. Access to the server

8. Configured github actions .github/workflows/checks.yml
9. Configured dockerhub credentials in github repo secrets

10. Database configuration
  - Added psycopg2 to requirements.txt
  - Configured postgresql dependencies in project Dockerfile
    [postgresql-client, build-base, postgresql-dev, musl-dev]
  - Deleted installation dependencies[build-base, postgresql-dev, musl-dev]
  - Setup Django to use postgresql

11. Database configuration 2 -> start django after finishing db configuration
  - Added core application
  - Handled race condition(Wait for the db to be ready)
    - Added core/test/test_commands.py
    - Added core/management/commands/wait_for_db.py
  - Added migrate, wait_for_db commands in docker-compose.yml
  - Added wait_for_db test command in Github Actions

12. Customise User model
  - Added test_models.py and scripts testing class & methods
  - Added User customisation with AbstractUser, PermissionsMixin
  - Added UserManager customisation with BaseUserManager
  - Configured AUTH_USER_MODEL as 'core.User' in settings.py
  - Executed makemigrations
    - docker-compose run --rm app sh -c "python manage.py makemigrations"
  - Deleted existing db data
    - docker volume rm recipe-app-api_dev-db-data
  - Executed migrate
    - docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py migrate"

13. Customise User Admin -> Allowing to access user related actions in admin page
  - Added test_admin.py and scripts testing class & methods
  - Added CustomUserAdmin customisation with UserAdmin class
  - Registerd User model with CustomUserAdmin

14. Auto-generation of API documentation -> drf-spectacular
  - OpenAPI Schema & Docs with a browsable web interface
    - added drf-spectacular in requirements.txt
    - built new docker image
    - configured drf-spectacular in settings & urls


â€» TDD application
  a. scripts test code first with the expected actions of the view
  b. scripts view code fitting the test code