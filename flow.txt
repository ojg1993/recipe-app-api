1. Created Gihub repo

2. Added requirements.txt, requirements.dev.txt
3. Added app directory

4. Scripted Dockerfile -> Docker-Compose.yml -> .dockerignore
5. Added linting configuration in app directory(.flake8)

6. Execute the docker-compose commands
  - docker-compose run --rm app sh -c "django-admin startproject app ."
  - docker-compose up

7. Access to the server

8. Configured github actions .github/workflows/checks.yml
9. Configured dockerhub credentials in github repo secrets

10. Database configuration
  - Added psycopg2 to requirements.txt
  - Configured postgresql dependencies in project Dockerfile
    [postgresql-client, build-base, postgresql-dev, musl-dev]
  - Deleted installation dependencies[build-base, postgresql-dev, musl-dev]
  - Setup Django to use postgresql

11. Database configuration 2 -> start django after finishing db configuration
  - Added core application
  - Handled race condition(Wait for the db to be ready)
    - Added core/test/test_commands.py
    - Added core/management/commands/wait_for_db.py
  - Added migrate, wait_for_db commands in docker-compose.yml
  - Added wait_for_db test command in Github Actions

12. Customise User model
  - Added test_models.py and scripts testing class & methods
  - Added User customisation with AbstractUser, PermissionsMixin
  - Added UserManager customisation with BaseUserManager
  - Configured AUTH_USER_MODEL as 'core.User' in settings.py
  - Executed makemigrations
    - docker-compose run --rm app sh -c "python manage.py makemigrations"
  - Deleted existing db data
    - docker volume rm recipe-app-api_dev-db-data
  - Executed migrate
    - docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py migrate"

13. Customise User Admin -> Allowing to access user related actions in admin page
  - Added test_admin.py and scripts testing class & methods
  - Added CustomUserAdmin customisation with UserAdmin class
  - Registerd User model with CustomUserAdmin

14. Auto-generation of API documentation -> drf-spectacular
  - OpenAPI Schema & Docs with a browsable web interface
    - added drf-spectacular in requirements.txt
    - built new docker image
    - configured drf-spectacular in settings & urls

15. Build User API -> startapp users
  - Deleted unecessary files & create tests dir
  - Defined test actions
  - Created serializers.py and define UserSerializer
  - Implemented CreateUserView and mapped urls

16. Implement Token authentication
  - Configured rest_framework.authtoken in setttings.py
  - Implemented token authentication test
  - Implemented AuthTokenSerializer
    - **Customised validate method to pass email as username**
  - Implemented CreateTokenView and mapped urls
    - Inherited ObatainAuthToken and utilised methods

17. Implement user management
  - Implemented PrivateUserApiTests - URL: me
  - Added update method to UserSerializer to manage user information change
    - ModelSerializer class method overiding
  - Implemented ManageUserView and mapped urls
    - APIVEW class get_object method overiding

18. Build recipe API
  - List view
    - Implemented test_create_recipe method in ModelTests
    - Implemented Recipe model
    - Created recipe app storing api & test only
    - Implemented PublicRecipeTests for unauthenticated request
    - Implemented PrivateRecipeTests for unauthenticated request
    - Implemented RecipeSerializer
    - Implemented RecipeViewSet and configured urls
       - Customised get_queryset method to return authenticated user's recipe only
  - Detail view
    - Implemented test_get_recipe_detail method in PrivateRecipeTests
    - Implemented RecipeDetailSerializer
    - Customised RecipeViewSet serializer setup with get_serializer_class
      - list -> RecipeSerializer else -> RecipeDetailSerializer
    - Implemented tests for detail view actions
      - PATCH, PUT, DELETE

19. Build tag API
  - Initial setup
    - Added test_create_tag method in ModelTests
    - Added Tag model and connected to recipe model as M2M field
    - Registered Tag in admin
  - Building API
    - Implemented PublicTagApiTests for unauthenticated users
    - Implemented PrivateTagApiTests for authenticated users
        - test_retrieve_tags, test_tags_limited_to_user
        - test_update_tag, test_delete_tag
  - Update recipe API functionality with Nested Serializers
    - Implemented test_create_recipe_with_new_tag, test_create_recipe_with_existing_tag
    - Nested TagSerializer into RecipeSerializer
    - Customized create method to process new or existing tag data
      - Create recipe -> tag then attach tag to the recipe
    - Customized update method to process new or existing or deleting tag data
      - Implemented test_create_tag_on_update, test_update_recipe_assign_tag, test_clear_recipe_tags
        ※ DB refresh not required on M2M relationship
      - Update recipe -> tag then attach tag to the recipe



※ TDD application
  a. scripts test code first with the expected actions of the view
  b. scripts view code fitting the test code